#!/usr/bin/perl

# Adds all users in domain to a calendar that are not already on the calendar.
#
# *** Newly added users are given editing permissions. ***
#
# Since it skips users already in the calendar's ACL, it does not change 
# existing user permissions.
# sample usage
# addAllUsersToCalendar --admin mheiges --passwd xxxxxx --calendar 'People' 
#
# $Id$
# $URL$
#


use strict;
use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use Getopt::Long;
use File::Basename;
use Provisioning;
use CalendarApp;

my $this = basename $0;
my ($admin, $passwd, $calendarName, $singleUser);
my $domain = 'apidb.org';

GetOptions(
    "admin=s"=>\$admin,
    "passwd=s"=>\$passwd,
    "calendar=s"=>\$calendarName,
    "add_email:s",\$singleUser,
  );

usage() unless ($admin && $passwd && $calendarName);

my @domainUserEmails;
if ($singleUser) {
    push @domainUserEmails, $singleUser;
} else {
    my $prov = new Provisioning($admin, $passwd, $domain);
    my @userObj = $prov->retrieveAllUsers;
    @domainUserEmails = map { $_->userName . '@' . $domain } @userObj
}

#print join "\n", @domainUserEmails;

my $calApp = new CalendarApp($admin, $passwd, $domain);

my $calendar = $calApp->retrieveCalendarFromAll('yet another calendar');

my @existingSubscribers = $calendar->aclUserEmails;

for my $email (@domainUserEmails) {
    if ( ! grep(/$email/, @existingSubscribers)) {
        print "adding $email\n";
        my $res = $calendar->addUserToAcl($email);
        print $res->code;
    }
}



sub usage {
    print <<"EOF";
Give users edit permissions for a shared google calendar. If --add_email option
is not used, all accounts not already on the calendar will be given edit access.

usage:
 $this --admin <username> --passwd <secretpass> --calendar <name of calendar> [options]

  options:
    --add_email 
       email address (username\@apidb.org) of person to add to given calendar.
EOF
    exit 1;
}
