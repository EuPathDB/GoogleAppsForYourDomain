#!/usr/bin/perl -w

# change on old copy
# backup Google documents (spreadsheets, word proc. docs, presentations)
# that are readable by authenticating user. Only backups files modified since
# last backup. Format of backups are .doc, .xls, and .ppt

#
# $Id: testCalendar 24133 2008-10-13 13:24:33Z mheiges $
# $URL$
#

use strict;
use FindBin;
use Data::Dumper;
use lib "$FindBin::Bin/../lib/perl";
use Date::Manip;
use File::Path;
use DocumentApp;

# number of rotated backup dirs to maintain
my $rotate = 4;

if (@ARGV < 3) {
	warn "budoc <username> <passwordfile> <backup/directory> [optional doc ID]\n";
    exit 1;
}
my $passwordfile = $ARGV[1];
open F, '<', "$passwordfile" or die "Passwordfile $passwordfile not found\n";
my $password = <F>;
chomp $password;
close F;

my $now = Date_ConvTZ(ParseDate("now"), undef, 'Z');
Date_Init("TZ=Z"); # redefine timezone to same as Google's timestamps

my $docApp = new DocumentApp($ARGV[0], $password, 'apidb.org');
my $buDir = $ARGV[2];
my $docIdReq = $ARGV[3];

die "'$buDir' not found\n" unless ( -d $buDir);
die "'$buDir' not writable\n" unless ( -w $buDir);

if ( ! -d $buDir . '/1') {
  mkdir $buDir . '/1';
}

my %expFormat = (
    document => 'doc',
    spreadsheet => 'xls',
    presentation => 'ppt',
);

my $lastBU;
if (-f "$buDir/.lastrun") {
  open (LAST, "$buDir/.lastrun") || die "could not open $buDir/.lastrun to read timestamp. $!\n";
  while (<LAST>) { chomp; $lastBU = $_; }
} else {
  $lastBU = '1970-01-01T20:00:00';
}

my $didRotate = 0;
my @docs = $docApp->retrieveAllDocuments();
for my $doc (@docs) {

    if (defined $docIdReq) {
      next unless ($doc->id eq $docIdReq);
    }

    my ($updated) = $doc->updated =~ m/^(.+)[A-Z]+$/;
    next if ( Date_Cmp($updated, $lastBU) < 0);

    $didRotate = rotateBackups($buDir, $rotate) if ! $didRotate;

    print $doc->title, "\n";
    my $type = $doc->type;
    
    $docApp->export($doc, $expFormat{$type}, $buDir . '/1');
}

open (LAST, ">$buDir/.lastrun") || die "could not open $buDir/.lastrun to record timestamp. $!\n";
print LAST UnixDate($now, "%Y-%m-%dT%H:%M:%S");

sub rotateBackups {
    my ($buDir, $rotate) = @_;
    
    return if (! $buDir || $buDir eq '' || $buDir eq '/');
    my $maxDir = $buDir . '/' . $rotate;
    if (-d $maxDir) {
        rename ($maxDir, $maxDir . '_')  || die "can not rename '$maxDir' to ${maxDir}_\n";
    }
    File::Path::rmtree($maxDir . '_') if (-d $maxDir . '_');
    for (my $i = $rotate -1; $i > 0; $i--) {
        my $back = $buDir . '/' . $i . '/';
        my $dest = $buDir . '/' . ($i +1);
        if (-d $buDir . '/' . $i) {
            system("rsync -a --link-dest=$back $back $dest");
        }
    }
    return 1;
}
