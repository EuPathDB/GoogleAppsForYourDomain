#!/usr/bin/perl -w

# backup Google documents (spreadsheets, word proc. docs, presentations)
# that are readable by authenticating user. Only backups files modified since
# last backup. Format of backups are .doc, .xls, .ppt, and .pdf

#
# $Id: testCalendar 24133 2008-10-13 13:24:33Z mheiges $
# $URL$
#

use strict;
use FindBin;
use Data::Dumper;
use lib "$FindBin::Bin/../lib/perl";
use DateTime;
use File::Path;
use Getopt::Long;

my $APPDIR="$FindBin::Bin/..";

# number of rotated backup dirs to maintain
my $max_rotations = 14;

if (@ARGV < 1) {
	warn "budoc <backupDirectory> [optional doc ID]\n";
	warn "Where <backupDirectory> the base directory where files will be rotated.\n";
  exit 1;
}

my $now = DateTime->now();

my $buDir = $ARGV[0];
my $home = $ENV{'HOME'};

my $configFile = "${home}/.google/DriveBackup.properties";
GetOptions ( "configFile=s" => \$configFile, );

die "'$buDir' not found\n" unless ( -d $buDir);
die "'$buDir' not writable\n" unless ( -w $buDir);

if ( ! -d $buDir . '/1') {
  mkdir $buDir . '/1';
}

my $lastBU;
if (-f "$buDir/.lastrun") {
  open (LAST, "$buDir/.lastrun") || die "could not open $buDir/.lastrun to read timestamp. $!\n";
  while (<LAST>) { chomp; $lastBU = $_; }
} else {
  $lastBU = '1970-01-01T20:00:00.000Z';
}

rotateBackups($buDir, $max_rotations);

if ( ! -f "${APPDIR}/build/DriveBackup.class") {
  system("${APPDIR}/bin/build");
}

system(<<EOF
java -classpath ${APPDIR}/:${APPDIR}/lib/java/*:${APPDIR}/lib/java:${APPDIR}/build \\
  DriveBackup \\
    -backupDir ${buDir}/1 \\
    -configFile ${configFile} \\
    -lastBackup ${lastBU} \\
#    -loglevel DEBUG \\
EOF
);

open (LAST, ">$buDir/.lastrun") || die "could not open $buDir/.lastrun to record timestamp. $!\n";
print LAST $now->strftime("%FT%T.%3NZ"); # match Google Drive File.getModifiedDate() format (2015-02-03T03:58:26.000Z)

sub rotateBackups {
    my ($buDir, $max_rotations) = @_;
    
    return if (! $buDir || $buDir eq '' || $buDir eq '/');
    my $maxDir = $buDir . '/' . $max_rotations;
    #if (-d $maxDir) {
    #    rename ($maxDir, $maxDir . '_')  || die "can not rename '$maxDir' to ${maxDir}_\n";
    #}
    File::Path::rmtree($maxDir . '_') if (-d $maxDir . '_');
    for (my $i = $max_rotations -1; $i > 0; $i--) {
        my $back = $buDir . '/' . $i . '/';
        my $dest = $buDir . '/' . ($i +1);
        if (-d $buDir . '/' . $i) {
            system("rsync -a --delete --link-dest=$back $back $dest");
        }
    }
    return 1;
}
